// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Reactive;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using Foundation;
using ReactiveUI;
using SignInUser.ViewModel;
using UIKit;

namespace SignInUser
{
    public partial class SignInViewController : ReactiveViewController<SignInViewModel>, IViewFor<SignInViewModel>
    {

        SignInViewModel _viewModel;


        public SignInViewModel SignInViewModel
        {
            get => _viewModel;
            set
            {
                this.RaiseAndSetIfChanged(ref _viewModel, value);
            }
        }

        object IViewFor.ViewModel
        {
            get => _viewModel;
            set
            {
                SignInViewModel = (SignInViewModel)value;
            }
        }

        public SignInViewController (IntPtr handle) : base (handle)
		{
        }

        public SignInViewController()
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            SignInViewModel = new SignInViewModel();
            imgCompanyLogo.Image = UIImage.FromBundle("spectrumlogo.png");

            //Dismiss the keyboards for the text fields
            txtUserName.ShouldReturn = (textField) =>
            {
                textField.ResignFirstResponder();
                return true;
            };

            txtPassword.ShouldReturn = (textField) =>
            {
                textField.ResignFirstResponder();
                return true;
            };

            this.WhenActivated(disposable =>
            {

                this.Bind(SignInViewModel, viewModel => viewModel.UserName, view => view.txtUserName.Text);
                this.Bind(SignInViewModel, viewModel => viewModel.Password, view => view.txtPassword.Text);
                this.Bind(SignInViewModel, viewModel => viewModel.SignButtonEnabled, view => view.btnSignIn.Enabled);
                this.BindCommand(SignInViewModel, viewModel => viewModel.SignInCommand, view => view.btnSignIn);

                SignInViewModel.ValidationAccount.RegisterHandler(
                        async interaction =>
                        {
                            var fieldAlert = UIAlertController.Create("SignIn Errors", $"{interaction.Input}", UIAlertControllerStyle.Alert);
                            fieldAlert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, null));
                            PresentViewController(fieldAlert, true, null);
                            interaction.SetOutput(true);
                        });

                SignInViewModel.NextSceneInteraction.RegisterHandler(
                        async interaction =>
                        {
                            UIStoryboard board = UIStoryboard.FromName("Main", null);
                            AccountsViewController accountsViewController = board.InstantiateViewController("AccountsViewController") as AccountsViewController;
                            PresentViewController(accountsViewController, true, null);
                        });
                
            });

        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
        }

    }
}
