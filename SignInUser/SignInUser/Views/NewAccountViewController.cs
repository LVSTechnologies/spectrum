// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Text.RegularExpressions;
using Foundation;
using ReactiveUI;
using SignInUser.Common.Extensions;
using SignInUser.ViewModel;
using UIKit;

namespace SignInUser
{
    public partial class NewAccountViewController : ReactiveViewController<NewAccountViewModel>, IViewFor<NewAccountViewModel>
    {
        NewAccountViewModel _viewModel;

        public NewAccountViewModel NewAccountViewModel
        {
            get => _viewModel;
            set
            {
                this.RaiseAndSetIfChanged(ref _viewModel, value);
            }
        }

        object IViewFor.ViewModel
        {
            get => _viewModel;
            set
            {
                NewAccountViewModel = (NewAccountViewModel)value;
            }
        }

        public NewAccountViewController (IntPtr handle) : base (handle)
		{
        }

        public NewAccountViewController()
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            btnClose.TouchUpInside += BtnClose_TouchUpInside;
            NewAccountViewModel = new NewAccountViewModel();
            //Dismiss the keyboards for the Password field
            txtPassword.ShouldReturn = (textField) =>
            {
                textField.ResignFirstResponder();
                return true;
            };
            txtPhoneNumber.KeyboardType = UIKeyboardType.PhonePad;
            txtPhoneNumber.Placeholder = Constants.PhoneNumberFormat;
            txtPhoneNumber.ShouldChangeCharacters = ShouldCharactersChange;

            this.WhenActivated(disposable =>
            {
                this.Bind(NewAccountViewModel, viewModel => viewModel.FirstName, view => view.txtFirstName.Text);
                this.Bind(NewAccountViewModel, viewModel => viewModel.LastName, view => view.txtLastName.Text);
                this.Bind(NewAccountViewModel, viewModel => viewModel.UserName, view => view.txtUserName.Text);
                this.Bind(NewAccountViewModel, viewModel => viewModel.Password, view => view.txtPassword.Text);
                this.Bind(NewAccountViewModel, viewModel => viewModel.PhoneNumber, view => view.txtPhoneNumber.Text);
                this.Bind(NewAccountViewModel, viewModel => viewModel.StartDateNSDate, view => view.dpServiceStartDate.Date);

                NewAccountViewModel.ValidationsAlert.RegisterHandler(
                        async interaction =>
                        {
                            var fieldAlert = UIAlertController.Create("Validation Errors", $"{interaction.Input}", UIAlertControllerStyle.Alert);
                            fieldAlert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, null));
                            PresentViewController(fieldAlert, true, null);
                            interaction.SetOutput(true);
                        });

                NewAccountViewModel.NextSceneInteraction.RegisterHandler(
                        async interaction =>
                        {
                            UIStoryboard board = UIStoryboard.FromName("Main", null);
                            SuccessViewController successViewController = board.InstantiateViewController("SuccessViewController") as SuccessViewController;
                            PresentViewController(successViewController, true, null);
                        });

                this.Bind(NewAccountViewModel, viewModel => viewModel.CreateUserButtonEnabled , view => view.btnCreateUser.Enabled);
                this.BindCommand(NewAccountViewModel, viewModel => viewModel.CreateUserCommand , view => view.btnCreateUser);
               
            });

            dpServiceStartDate.MinimumDate = (NSDate)DateTime.Now;
        }

        private void BtnClose_TouchUpInside(object sender, EventArgs e)
        {
            DismissModalViewController(true);
        }

        //Method for Masking the Phone number field
        private bool ShouldCharactersChange(UITextField textField, NSRange range, string replacementString)
        {
            var text = textField.Text;
            var newString = text.Substring(0, (int)range.Location) + replacementString + text.Substring((int)(range.Location + range.Length));
            var decimalString = Regex.Replace(newString, @"[^\d]", string.Empty);
            var length = decimalString.Length;
            var hasLeadingOne = length > 0 && decimalString[0] == '1';
            if ((length == 0) || (length > 10 && !hasLeadingOne) || (length > 11))
            {
                textField.Text = decimalString;
                return false;
            }
            var index = 0;
            var formattedString = "";
            if (hasLeadingOne)
            {
                formattedString += "1";
                index += 1;
            }
            if (length - index > 3)
            {
                var areaCode = decimalString.Substring(index, 3);
                formattedString += "(" + areaCode + ")";
                index += 3;
            }
            if (length - index > 3)
            {
                var prefix = decimalString.Substring(index, 3);
                formattedString += " " + prefix + "-";
                index += 3;
            }
            var remainder = decimalString.Substring(index);
            formattedString += remainder;
            textField.Text = formattedString;
            return false;
        }
    }
}
